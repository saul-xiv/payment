// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentCodeChallenge.Data;

#nullable disable

namespace PaymentCodeChallenge.Migrations
{
    [DbContext(typeof(PaymentDbContext))]
    [Migration("20240811112034_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PaymentCodeChallenge.Models.EstadoPagoCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("catEstadoPago", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Registrado"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "En_Proceso"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Pagado"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Cancelado"
                        });
                });

            modelBuilder.Entity("PaymentCodeChallenge.Models.Payment", b =>
                {
                    b.Property<Guid>("IdPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CantidadProductos")
                        .HasColumnType("int");

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstadoPagoId")
                        .HasColumnType("int");

                    b.Property<Guid>("IdUsuarioPaga")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUsuarioRecibe")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MontoTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPago")
                        .HasName("PK_Payments");

                    b.HasIndex("EstadoPagoId");

                    b.HasIndex("IdUsuarioPaga");

                    b.HasIndex("IdUsuarioRecibe");

                    b.ToTable("Pago", (string)null);
                });

            modelBuilder.Entity("PaymentCodeChallenge.Models.RolCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("catRol", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "User"
                        });
                });

            modelBuilder.Entity("PaymentCodeChallenge.Models.User", b =>
                {
                    b.Property<Guid>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contrasenia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUsuario");

                    b.HasIndex("IdRol");

                    b.ToTable("Usuario", (string)null);

                    b.HasData(
                        new
                        {
                            IdUsuario = new Guid("17fa39bc-5552-4c5f-ae43-9cb8bf428cc4"),
                            Contrasenia = "adminpassword",
                            Correo = "admin@example.com",
                            IdRol = 1,
                            Nombre = "Admin"
                        },
                        new
                        {
                            IdUsuario = new Guid("a786221c-5f34-45e4-a296-85ff88edfa73"),
                            Contrasenia = "user1password",
                            Correo = "user1@example.com",
                            IdRol = 2,
                            Nombre = "John Doe"
                        },
                        new
                        {
                            IdUsuario = new Guid("3fbfdc32-c0ae-4921-95ac-429d7cbd99b3"),
                            Contrasenia = "user2password",
                            Correo = "user2@example.com",
                            IdRol = 2,
                            Nombre = "Jane Doe"
                        },
                        new
                        {
                            IdUsuario = new Guid("6cbeba98-7b66-4121-95c6-da6865b7820f"),
                            Contrasenia = "user3password",
                            Correo = "user3@example.com",
                            IdRol = 2,
                            Nombre = "John Smith"
                        });
                });

            modelBuilder.Entity("PaymentCodeChallenge.Models.Payment", b =>
                {
                    b.HasOne("PaymentCodeChallenge.Models.EstadoPagoCatalog", null)
                        .WithMany()
                        .HasForeignKey("EstadoPagoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PaymentCodeChallenge.Models.User", "UsuarioPaga")
                        .WithMany()
                        .HasForeignKey("IdUsuarioPaga")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PaymentCodeChallenge.Models.User", "UsuarioRecibe")
                        .WithMany()
                        .HasForeignKey("IdUsuarioRecibe")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UsuarioPaga");

                    b.Navigation("UsuarioRecibe");
                });

            modelBuilder.Entity("PaymentCodeChallenge.Models.User", b =>
                {
                    b.HasOne("PaymentCodeChallenge.Models.RolCatalog", null)
                        .WithMany()
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
